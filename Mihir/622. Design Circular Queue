class MyCircularQueue {
public:
    int arr[3001] = {0};
    int leftIdx;
    int rightIdx;
    int size;
    MyCircularQueue(int k) {
        size = k;
        leftIdx = 0;
        rightIdx = 0;
    }
    
    bool enQueue(int value) {
        if(rightIdx - leftIdx == size) {
            return false;
        }
        
        arr[rightIdx++] = value;
        return true;
    }
    
    bool deQueue() {
        if(rightIdx == leftIdx) {
            return false;
        }
        leftIdx++;
        return true;
    }
    
    int Front() {
        if(leftIdx == rightIdx) {
            return -1;
        }
        return arr[leftIdx];
    }
    
    int Rear() {
        if(leftIdx == rightIdx) {
            return -1;
        }
        return arr[rightIdx - 1];
    }
    
    bool isEmpty() {
        return leftIdx == rightIdx;
    }
    
    bool isFull() {
        return rightIdx - leftIdx == size;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
